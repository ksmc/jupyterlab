"use strict";
/*-----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs-extra"));
const glob = __importStar(require("glob"));
const path = __importStar(require("path"));
const ts = __importStar(require("typescript"));
const get_dependency_1 = require("./get-dependency");
const utils = __importStar(require("./utils"));
const CSS_HEADER = `
/*-----------------------------------------------------------------------------
| Copyright (c) Jupyter Development Team.
| Distributed under the terms of the Modified BSD License.
|----------------------------------------------------------------------------*/

/* This file was auto-generated by ensurePackage() in @jupyterlab/buildutils */
`;
/**
 * Ensure the integrity of a package.
 *
 * @param options - The options used to ensure the package.
 *
 * @returns A list of changes that were made to ensure the package.
 */
async function ensurePackage(options) {
    let { data, pkgPath } = options;
    let deps = data.dependencies || {};
    let devDeps = data.devDependencies || {};
    let seenDeps = options.depCache || {};
    let missing = options.missing || [];
    let unused = options.unused || [];
    let messages = [];
    let locals = options.locals || {};
    let cssImports = options.cssImports || [];
    let differentVersions = options.differentVersions || [];
    // Verify dependencies are consistent.
    let promises = Object.keys(deps).map(async (name) => {
        if (differentVersions.indexOf(name) !== -1) {
            // Skip processing packages that can have different versions
            return;
        }
        if (!(name in seenDeps)) {
            seenDeps[name] = await get_dependency_1.getDependency(name);
        }
        if (deps[name] !== seenDeps[name]) {
            messages.push(`Updated dependency: ${name}@${seenDeps[name]}`);
        }
        deps[name] = seenDeps[name];
    });
    await Promise.all(promises);
    // Verify devDependencies are consistent.
    promises = Object.keys(devDeps).map(async (name) => {
        if (differentVersions.indexOf(name) !== -1) {
            // Skip processing packages that can have different versions
            return;
        }
        if (!(name in seenDeps)) {
            seenDeps[name] = await get_dependency_1.getDependency(name);
        }
        if (devDeps[name] !== seenDeps[name]) {
            messages.push(`Updated devDependency: ${name}@${seenDeps[name]}`);
        }
        devDeps[name] = seenDeps[name];
    });
    await Promise.all(promises);
    // For TypeScript files, verify imports match dependencies.
    let filenames = [];
    filenames = glob.sync(path.join(pkgPath, 'src/*.ts*'));
    filenames = filenames.concat(glob.sync(path.join(pkgPath, 'src/**/*.ts*')));
    if (!fs.existsSync(path.join(pkgPath, 'tsconfig.json'))) {
        if (utils.writePackageData(path.join(pkgPath, 'package.json'), data)) {
            messages.push('Updated package.json');
        }
        return messages;
    }
    let imports = [];
    // Extract all of the imports from the TypeScript files.
    filenames.forEach(fileName => {
        let sourceFile = ts.createSourceFile(fileName, fs.readFileSync(fileName).toString(), ts.ScriptTarget.ES6, 
        /*setParentNodes */ true);
        imports = imports.concat(getImports(sourceFile));
    });
    // Make sure we are not importing CSS in a core package.
    if (data.name.indexOf('example') === -1) {
        imports.forEach(importStr => {
            if (importStr.indexOf('.css') !== -1) {
                messages.push('CSS imports are not allowed source files');
            }
        });
    }
    let names = Array.from(new Set(imports)).sort();
    names = names.map(function (name) {
        let parts = name.split('/');
        if (name.indexOf('@') === 0) {
            return parts[0] + '/' + parts[1];
        }
        return parts[0];
    });
    // Look for imports with no dependencies.
    promises = names.map(async (name) => {
        if (missing.indexOf(name) !== -1) {
            return;
        }
        if (name === '.' || name === '..') {
            return;
        }
        if (!deps[name]) {
            if (!(name in seenDeps)) {
                seenDeps[name] = await get_dependency_1.getDependency(name);
            }
            deps[name] = seenDeps[name];
            messages.push(`Added dependency: ${name}@${seenDeps[name]}`);
        }
    });
    await Promise.all(promises);
    // Template the CSS index file.
    if (cssImports && fs.existsSync(path.join(pkgPath, 'style/base.css'))) {
        let cssIndex = CSS_HEADER.trim();
        cssImports.forEach(cssImport => {
            cssIndex += `\n@import url('~${cssImport}');`;
        });
        cssIndex += "\n\n@import url('./base.css');\n";
        const cssPath = path.join(pkgPath, 'style/index.css');
        const prev = fs.readFileSync(cssPath, { encoding: 'utf8' });
        if (prev !== cssIndex) {
            messages.push(`Updated ./${data.style}`);
            fs.writeFileSync(cssPath, cssIndex);
        }
    }
    // Look for unused packages
    Object.keys(deps).forEach(name => {
        if (options.noUnused === false) {
            return;
        }
        if (unused.indexOf(name) !== -1) {
            return;
        }
        const isTest = data.name.indexOf('test') !== -1;
        if (isTest) {
            const testLibs = ['jest', 'ts-jest', '@jupyterlab/testutils'];
            if (testLibs.indexOf(name) !== -1) {
                return;
            }
        }
        if (names.indexOf(name) === -1) {
            let version = data.dependencies[name];
            messages.push(`Unused dependency: ${name}@${version}: remove or add to list of known unused dependencies for this package`);
        }
    });
    // Handle typedoc config output.
    const tdOptionsPath = path.join(pkgPath, 'tdoptions.json');
    if (fs.existsSync(tdOptionsPath)) {
        const tdConfigData = utils.readJSONFile(tdOptionsPath);
        const pkgDirName = pkgPath.split('/').pop();
        tdConfigData['out'] = `../../docs/api/${pkgDirName}`;
        utils.writeJSONFile(tdOptionsPath, tdConfigData);
    }
    // Handle references.
    let references = Object.create(null);
    Object.keys(deps).forEach(name => {
        if (!(name in locals)) {
            return;
        }
        const target = locals[name];
        if (!fs.existsSync(path.join(target, 'tsconfig.json'))) {
            return;
        }
        let ref = path.relative(pkgPath, locals[name]);
        references[name] = ref.split(path.sep).join('/');
    });
    if (data.name.indexOf('example-') === -1 &&
        Object.keys(references).length > 0) {
        const tsConfigPath = path.join(pkgPath, 'tsconfig.json');
        const tsConfigData = utils.readJSONFile(tsConfigPath);
        tsConfigData.references = [];
        Object.keys(references).forEach(name => {
            tsConfigData.references.push({ path: references[name] });
        });
        utils.writeJSONFile(tsConfigPath, tsConfigData);
    }
    // Get a list of all the published files.
    // This will not catch .js or .d.ts files if they have not been built,
    // but we primarily use this to check for files that are published as-is,
    // like styles, assets, and schemas.
    const published = new Set(data.files
        ? data.files.reduce((acc, curr) => {
            return acc.concat(glob.sync(path.join(pkgPath, curr)));
        }, [])
        : []);
    // Ensure that the `schema` directories match what is in the `package.json`
    const schemaDir = data.jupyterlab && data.jupyterlab.schemaDir;
    const schemas = glob.sync(path.join(pkgPath, schemaDir || 'schema', '*.json'));
    if (schemaDir && !schemas.length) {
        messages.push(`No schemas found in ${path.join(pkgPath, schemaDir)}.`);
    }
    else if (!schemaDir && schemas.length) {
        messages.push(`Schemas found, but no schema indicated in ${pkgPath}`);
    }
    for (let schema of schemas) {
        if (!published.has(schema)) {
            messages.push(`Schema ${schema} not published in ${pkgPath}`);
        }
    }
    // Ensure that the `style` directories match what is in the `package.json`
    const styles = glob.sync(path.join(pkgPath, 'style', '**/*.*'));
    for (let style of styles) {
        if (!published.has(style)) {
            messages.push(`Style file ${style} not published in ${pkgPath}`);
        }
    }
    // If we have styles, ensure that 'style' field is declared
    if (styles.length > 0) {
        if (data.style === undefined) {
            data.style = 'style/index.css';
        }
    }
    // Ensure that sideEffects are declared, and that any styles are covered
    if (styles.length > 0) {
        if (data.sideEffects === undefined) {
            messages.push(`Side effects not declared in ${pkgPath}, and styles are present.`);
        }
        else if (data.sideEffects === false) {
            messages.push(`Style files not included in sideEffects in ${pkgPath}`);
        }
    }
    // Ensure dependencies and dev dependencies.
    data.dependencies = deps;
    data.devDependencies = devDeps;
    if (Object.keys(data.dependencies).length === 0) {
        delete data.dependencies;
    }
    if (Object.keys(data.devDependencies).length === 0) {
        delete data.devDependencies;
    }
    // Make sure there are no gitHead keys, which are only temporary keys used
    // when a package is actually being published.
    delete data.gitHead;
    // Ensure there is a minimal prepublishOnly script
    if (!data.private && !data.scripts.prepublishOnly) {
        messages.push(`prepublishOnly script missing in ${pkgPath}`);
        data.scripts.prepublishOnly = 'npm run build';
    }
    if (utils.writePackageData(path.join(pkgPath, 'package.json'), data)) {
        messages.push('Updated package.json');
    }
    return messages;
}
exports.ensurePackage = ensurePackage;
/**
 * Extract the module imports from a TypeScript source file.
 *
 * @param sourceFile - The path to the source file.
 *
 * @returns An array of package names.
 */
function getImports(sourceFile) {
    let imports = [];
    handleNode(sourceFile);
    function handleNode(node) {
        switch (node.kind) {
            case ts.SyntaxKind.ImportDeclaration:
                imports.push(node.moduleSpecifier.text);
                break;
            case ts.SyntaxKind.ImportEqualsDeclaration:
                imports.push(node.moduleReference.expression.text);
                break;
            default:
            // no-op
        }
        ts.forEachChild(node, handleNode);
    }
    return imports;
}
//# sourceMappingURL=ensure-package.js.map